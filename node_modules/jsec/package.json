{
  "name": "jsec",
  "author": {
    "name": "Tomasz Janczuk",
    "email": "tomasz@janczuk.org",
    "url": "http://tomasz.janczuk.org"
  },
  "version": "1.0.1",
  "description": "Secure your JSON",
  "tags": [
    "JSON",
    "signature",
    "encryption",
    "protect",
    "integrity"
  ],
  "main": "./lib/jsec.js",
  "engines": {
    "node": ">= 0.10"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "base64-url": "^1.2.1"
  },
  "devDependencies": {
    "mocha": "^2.2.4"
  },
  "homepage": "https://github.com/tjanczuk/jsec",
  "repository": {
    "type": "git",
    "url": "git@github.com:tjanczuk/jsec.git"
  },
  "bugs": {
    "url": "http://github.com/tjanczuk/jsec/issues"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "readme": "jsec: secure your JSON\n====\n\nWith the *jsec* package you can easily encrypt, sign, and base64-url encode any JSON-serializable data. Encoded data can be safely transmitted through untrusted channels or persisted. \n\nKey features: \n\n* You can use any signature and encryption algorithm, as long as it is HMAC-SHA256 and AES-256-CBC, respectively.\n* You can maintain a set of accepted signature/encryption keysets which helps arrange key rollover.\n* Encrypted and signed data is base64-url encoded for ease of trasmission over HTTP.\n\n### Installation\n\n```\nnpm install jsec\n```\n\n### Encoding\n\n```javascript\nvar crypto = require('crypto');\nvar jsec = require('jsec');\n\nvar keyset = {\n    // keyset identifier\n    id: '1',\n\n    // signature key - any length\n    skey: crypto.randomBytes(20),\n\n    // encryption key - must be 32 bytes\n    ekey: crypto.randomBytes(32)\n};\n\n// payload to protect - any JSON-serializable structure\nvar payload = {\n    hello: 'world',\n    foo: 12\n};\n\nconsole.log(jsec.encode(payload, keyset));\n```\n\n### Decoding\n\n```javascript\nvar jsec = require('jsec');\n\n// map of accepted keysets\nvar keysets = {\n    '1': {\n        // signature key - same as before\n        skey: new Buffer(...),\n\n        // encryption key - must be 32 bytes and same as before\n        ekey: new Buffer(...)\n    },\n    '2': {\n        // ... another accepted keyset \n    }\n};\n\nvar encoded = ... // the base64-url encoded string \n\nconsole.log(jsec.decode(encoded, keysets));\n\n// returns an object with 2 properties: \n// .id - the keyset id used to decode the payload\n// .payload - JSON-deserialized plaintext payload\n```\n",
  "readmeFilename": "README.md",
  "_id": "jsec@1.0.1",
  "_shasum": "1b4f6f168989d81efb7113014f25bedd0691d505",
  "_from": "jsec@",
  "_resolved": "http://registry.npmjs.org/jsec/-/jsec-1.0.1.tgz"
}
